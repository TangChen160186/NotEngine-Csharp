<UserControl x:Class="NotEngine.Editor.Modules.ContentExplorer.Views.ContentExplorerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.WPF.DragDrop"
             xmlns:converters="clr-namespace:NotEngine.Editor.Modules.ContentExplorer.Converters"
             xmlns:customControls="clr-namespace:NotEngine.Editor.CustomControls"
             xmlns:converters1="clr-namespace:Gemini.Modules.Shell.Converters;assembly=Gemini"
             xmlns:converters2="clr-namespace:Gemini.Modules.MainMenu.Converters;assembly=Gemini"
             xmlns:controls11="clr-namespace:NotEngine.Editor.Modules.ContentExplorer.Controls"
             xmlns:behaviors="clr-namespace:Gemini.Modules.MainMenu.Behaviors;assembly=Gemini"
             xmlns:behaviours="clr-namespace:NotEngine.Editor.Behaviours"
             xmlns:cm="http://caliburnmicro.com"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <converters:AssetTypeToIconConverter x:Key="FileTypeToIconConverter" />
        <BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <HierarchicalDataTemplate x:Key="MasterTreeViewDataTemplate" ItemsSource="{Binding Children,Mode=TwoWay}">
            <StackPanel Orientation="Horizontal">
                <Image Width="18" Height="18" Margin="4,2" 
                       Source="{Binding Icon}" />
    
                <customControls:RenameableTextblock Text="{Binding Name,Mode=TwoWay}" 
                                                    Margin="4,2" 
                                            Focusable="False"
                                            IsEditing="{Binding IsEditing,Mode=TwoWay}"
                                            CanEditing="{Binding CanEdit,Mode=TwoWay}" />
            </StackPanel>
        </HierarchicalDataTemplate>
        <Style TargetType="{x:Type TreeViewItem}" x:Key="MasterTreeViewItemContainerStyle"
               BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <EventSetter Event="PreviewMouseRightButtonDown"
                         Handler="TreeViewItem_PreviewMouseRightButtonDown" />
            <Setter Property="IsExpanded" Value="{Binding IsExpanded,Mode=TwoWay}" />
            <Setter Property="Visibility" Value="{Binding IsFolder,Converter={StaticResource BoolToVisibilityConverter}}" />
            <Setter Property="customControls:MultiSelectTreeView.IsItemSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
            <Style.Triggers>
                <Trigger Property="customControls:MultiSelectTreeView.IsItemSelected" Value="True">
                    <Setter Property="Background" Value="#452735" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--context menu-->

        <converters1:NullableValueConverter x:Key="NullableValueConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

        <HierarchicalDataTemplate  x:Key="contextMenuTemplate"
                                  ItemsSource="{Binding Children,Mode=OneWay}">
            <ContentPresenter Content="{Binding Path=Text}" RecognizesAccessKey="True" />
        </HierarchicalDataTemplate>

        <converters2:StringToApplicationResourceConverter x:Key="ApplicationResourceConverter"/>
        <Path x:Key="ContextMenuItemIcon" Stretch="Fill"
              Fill="{Binding PathDataForegroundName,Converter={StaticResource ApplicationResourceConverter}}" 
              x:Shared="false"
              Data="{Binding PathData,Mode=OneWay}" />
        <Style x:Key="ContextMenuItem" TargetType="{x:Type controls11:ContextMenuItemEx}">
            <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <Setter Property="InputGestureText" Value="{Binding InputGestureText}" />
            <Setter Property="Icon" Value="{StaticResource ContextMenuItemIcon}" />
            <Setter Property="IsCheckable" Value="{Binding IsChecked, Mode=OneWay}" />
            <Setter Property="IsChecked" Value="{Binding IsChecked, Mode=OneWay}" />
            <Setter Property="Command" Value="{Binding Command}" />
            <Setter Property="behaviors:MenuBehavior.UpdateCommandUiItems" Value="True" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding PathData}" Value="{x:Null}">
                    <Setter Property="Icon" Value="{x:Null}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>



        <!--ListBox-->
        <!-- 自定义 ListBoxItem 的样式 -->
        <Style TargetType="ListBoxItem">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Margin" Value="8" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Border>

                        <ControlTemplate.Triggers>
                            <!-- 鼠标悬停时的背景颜色 -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#23282a" />
                                <Setter Property="Cursor" Value="Hand" />
                            </Trigger>

                            <!-- 选中项的背景颜色 -->
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#23282a" />
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="2*"/>
        </Grid.ColumnDefinitions>

        <customControls:MultiSelectTreeView
            x:Name="FolderTreeView"
            Background="Transparent"
            Grid.Column="0"
            Grid.Row="1"
            dd:DragDrop.IsDragSource="True"
            dd:DragDrop.IsDropTarget="True"
            dd:DragDrop.DropHandler="{Binding}"
            SelectedItems="{Binding CurrentSelectFolderItems,Mode=TwoWay}"
            ItemsSource="{Binding MasterFolderItems,Mode=TwoWay}"
            BorderThickness="0"
            ItemTemplate="{StaticResource MasterTreeViewDataTemplate}"
            ItemContainerStyle="{StaticResource MasterTreeViewItemContainerStyle}">
            
            <TreeView.ContextMenu>
                <controls11:ContextMenuEx ItemsSource="{Binding ContextMenuItems}"
                                        ItemTemplate="{StaticResource contextMenuTemplate}"
                                        Style="{DynamicResource {x:Type ContextMenu}}"/>
            </TreeView.ContextMenu>

        </customControls:MultiSelectTreeView>
        <GridSplitter VerticalAlignment="Stretch" Grid.Column="0" Width="2" Background="#5395b4" Grid.Row="1"/>

        <ListBox Name="MyListBox" Grid.Column="1" Grid.Row="1"
                 VerticalAlignment="Stretch"
                 Loaded="MyListBox_Loaded"
                 SizeChanged="MyListBox_SizeChanged"
                 BorderThickness="0"
                 Background="Transparent" 
                 Foreground="#bbbbbb"
                 SelectionMode="Extended"
                 ItemsSource="{Binding DetailItems,Mode=OneWay}"
                 dd:DragDrop.IsDragSource="True"
                 dd:DragDrop.IsDropTarget="True"
                 dd:DragDrop.DropHandler="{Binding}"
                 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                 behaviours:ListBoxSelectedItemsBehavior.BindableSelectedItems="{Binding CurrentSelectDetailItems,Mode=TwoWay}">
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel x:Name="WrapPanel" />
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>

            <ListBox.ContextMenu>
                <controls11:ContextMenuEx ItemsSource="{Binding ContextMenuItems}"
                                          ItemTemplate="{StaticResource contextMenuTemplate}"
                                          Style="{DynamicResource {x:Type ContextMenu}}"/>
            </ListBox.ContextMenu>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel>
                        <Image Width="160" Height="80" Margin="4,2" HorizontalAlignment="Center"
                               VerticalAlignment="Top"
                                        Source="{Binding Icon}"/>

                        <customControls:RenameableTextblock Text="{Binding Name,Mode=TwoWay}" 
                                                            cm:Message.Attach="[Event LostFocus]=[Action RenameTextboxLostFocus($this.Text)]"
                                                            HorizontalAlignment="Stretch"
                                                            HorizontalContentAlignment="Center"
                                                            VerticalAlignment="Stretch"
                                                            Margin="4,2" 
                                                            Focusable="False"
                                                            IsEditing="{Binding IsEditing,Mode=TwoWay}"
                                                            CanEditing="{Binding CanEdit,Mode=TwoWay}" />
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
    </Grid>
</UserControl>